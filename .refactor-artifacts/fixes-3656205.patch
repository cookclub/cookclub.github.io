*** Begin Patch
*** Update File: index.html
@@
-  <script>
-    // Root GitHub Pages site
-    const BASE = '/';
+  <script>
+    // Root GitHub Pages user site. Use HASH routing to avoid 404s on deep links.
+    const BASE = '/';
@@
-      updateURL(path) {
-        // path examples: 'library' or `read/${this.currentBookId}?loc=${cfi}`
-        const target = path.startsWith('#') ? path : `#/${path.replace(/^\//,'')}`;
-        if (location.hash !== target) location.hash = target;
-      }
+      updateURL(path) {
+        // Always drive navigation via hash so hard-reloads don't hit 404 on Pages.
+        const safe = path.replace(/^\//, '');
+        const target = `#/${safe}`;
+        if (location.hash !== target) location.hash = target;
+      }
@@
-      handleDeepLinks() {
-        const hash = location.hash.replace(/^#\/?/, ''); // normalize
-        const [route, rest] = hash.split('/');
-        if (route === 'read') {
-          const [bookIdAndQuery] = rest ? [rest] : [''];
-          const [bookId, query] = bookIdAndQuery.split('?');
-          const params = new URLSearchParams(query || '');
-          const loc = params.get('loc');
-          if (bookId) this.openBook(bookId, loc);
-        } else {
-          this.showLibrary();
-        }
-      }
+      handleDeepLinks() {
+        const hash = location.hash.replace(/^#\/?/, ''); // normalize
+        const [route, rest] = hash.split('/');
+        if (route === 'read') {
+          const [bookIdAndQuery] = rest ? [rest] : [''];
+          const qIndex = (bookIdAndQuery || '').indexOf('?');
+          const bookId = qIndex >= 0 ? bookIdAndQuery.slice(0, qIndex) : bookIdAndQuery;
+          const query = qIndex >= 0 ? bookIdAndQuery.slice(qIndex + 1) : '';
+          const params = new URLSearchParams(query || '');
+          const rawLoc = params.get('loc');
+          const loc = rawLoc ? decodeURIComponent(rawLoc) : null;
+          if (bookId) this.openBook(bookId, loc);
+        } else {
+          this.showLibrary();
+        }
+      }
@@
-      async openBook(bookId, location = null) {
+      async openBook(bookId, location = null) {
         const bookData = this.booksData.find(b => b.id === bookId);
         if (!bookData) return;
@@
-        try {
-          this.book = ePub(`${BASE}${bookData.href}`);
+        try {
+          this.book = ePub(`${BASE}${bookData.href}`);
@@
-          this.rendition = this.book.renderTo(viewer, {
-            width: '100%', height: '100%',
-            spread: this.viewMode === 'paginated' ? 'auto' : 'none',
-            flow: this.viewMode === 'scrolled' ? 'scrolled' : 'paginated',
-            allowScriptedContent: true   // ← add this
-          });
+          this.rendition = this.book.renderTo(viewer, {
+            width: '100%',
+            height: '100%',
+            spread: this.viewMode === 'paginated' ? 'auto' : 'none',
+            flow: this.viewMode === 'scrolled' ? 'scrolled' : 'paginated',
+            // Important for some EPUBs that inject script content:
+            allowScriptedContent: true
+          });
@@
-        this.rendition.on('relocated', (location) => {
-          this.currentLocation = location;
-          this.updateProgress();
-          this.saveLastLocation();
-          this.updateURL(`read/${this.currentBookId}?loc=${location.start.cfi}`);
-        });
+        this.rendition.on('relocated', (location) => {
+          this.currentLocation = location;
+          this.updateProgress();
+          this.saveLastLocation();
+          // Always encode CFIs before putting them in the URL
+          const enc = encodeURIComponent(location.start.cfi);
+          this.updateURL(`read/${this.currentBookId}?loc=${enc}`);
+        });
@@
-    window.addEventListener('popstate', () => { reader && reader.handleDeepLinks(); });
+    window.addEventListener('popstate', () => { reader && reader.handleDeepLinks(); });
+    window.addEventListener('hashchange', () => { reader && reader.handleDeepLinks(); });
*** End Patch

